YeeHaw {
  Program   = Statement+
  Statement = PrintStmt
            | VarDec
            | AssignStmt
            | IfStmt
            | Return
            | FuncDec
            | Call
            | DotCall 
            | DotExp
            | skedaddle
            | Loop
            
  PrintStmt   = holler Exp  
  VarDec      = lasso id "=" (Exp | Exp2) 
  AssignStmt  = id "=" Exp 
  IfStmt      = ifin Exp hit Statement+ miss Statement+ fine  --else
              | ifin Exp hit Statement+ fine                  --noelse
  Return      = rodeo Exp
  Params      = ListOf<id, ",">
  Block 	    = "{" Statement* "}"
  FuncDec 	  = yeehaw id"(" Params ")" Block
  ConstBlock  = "{" Constructor Statement* "}"
  ClassDec	  = cowhide id ConstBlock
  Constructor = yeehaw "***"cactus"***""(" Params ")" Block
  Call        = id "(" Params ")"
  DotCall	    = id "."id"(" Params ")"
  DotExp	    = id "."id

  Loop      = corrale "("id ":" Exp ")" Block
  Type      = id

  id        = ~keyword idchar+
  idchar    = letter | "_"
  
  keyword   = lasso | holler | ifin | hit | miss 
            | fine | yeehaw | rodeo | corrale 
            | cowhide | cactus | skedaddle
  Var       = id
 
  Exp       = Exp0 "==" Exp0  --equal
            | Exp0

  Exp0      = Exp0 "+" Exp1   --add
            | Exp0 "-" Exp1   --sub
            | Exp1

  Exp1      = Exp1 "/" Term   --div
            | Exp1 "*" Term   --mul
            | Term

  Exp2      = hit
            | miss
  
  Term      = numeral 
            | strlit
            | id "(" ListOf<Exp, ","> ")"   --call
            | Var
            | "(" Exp ")"    --parens

  lasso     = "lasso" ~idchar
  holler    = "holler" ~idchar
  ifin      = "ifin" ~idchar
  hit       = "hit" ~idchar
  miss      = "miss" ~idchar
  fine      = "fine" ~idchar
  yeehaw 	  = "yeehaw" ~idchar
  rodeo 	  = "rodeo" ~idchar
  corrale   = "corrale" ~idchar
  cowhide   = "cowhide" ~idchar
  cactus    = "cactus" ~idchar
  skedaddle = "skedaddle" ~idchar

  numeral   = digit+ ("." digit+)?
  strlit    = "\"" (~"\"" any)* "\""

  space    += "//" (~"\n" any)*       --comment
}